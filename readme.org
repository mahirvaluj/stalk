* stalk
  A peer-to-peer encrypted protocol at the application layer (over
  TCP), using [[https://github.com/mahirvaluj/spack][spack]] for structured message passing.

  The purpose of this protocol is mostly for myself to learn to
  implement something of this type, but I will hopefully be using it
  for other things as well.
  
* API
  The API will be a message-based API, so most of the functionality (the
  actual bundling into individual spack packets as well as their
  transmission over TCP) is hidden from the programmer.
  
  Another note on connections: this protocol is being built with the
  idea of using it in a key-value store in the future, as well as in
  conjoinment with a Kerberos-like authentication system. Therefore,
  if you play your cards right, you should never have to authenticate
  insecuretly (vulnerable to mitm), but I wanted to offer the
  functionality.
  
** Functions
*** (~listen~ ~host~ ~port~ ~handler~)
    Listen for connections at ~host~, on the given ~port~. 

    You must pass ~handler~, which is a function which takes one
    argument, a ~stalk-connection~ with which you can manage the
    connection. 

    In the function, you should set a callback for when spack objects
    come down the wire.

*** (~connect~ ~host~ ~port~ &optional ~identity~ &key ~handler~)
    Create a connection to ~ip~ on ~port~, attempting to connect to
    ~identity~, and will return a ~stalk-connection~ class. If the
    server you try to connect to's identity does not check out, then
    will error out.

    If identity is not provided, no authentication is done, and the
    handshake is thus vulnerable to MITM attacks.

**** TODO Failure?
**** TODO rework handler?
     Handler is optional, and is a function that will be run every time
     a spack is recieved over the network. 

*** (~send~ ~spack~ ~connection~)
    This is a message based protocol, unlike TCP, which is a
    bytestream-based one. To use it, create a ~spack~ object, push the
    objects on it you want to be delivered as a unit, and this will
    send them down the wire serialized and encrypted. 
    
*** Is this required?
*** (~flush~ ~connection~)
    Force the currently sent elements down the pipeline and out the
    socket.
   
** Classes
*** ~stalk-connection~
    This is the catch-all class for connections from one node to another.
**** Slots
     - ~host~
       - Host with which you're communicating
     - ~port~
       - Self-explanatory
     - I'll add other things here later
     - ~crypto-data~
*** ~stalk-identity~
**** Slots
     - ~key~
       - Public key of identity
     - other info?
       
* How it works
  As a disclaimer, I care a lot about having no data corruption, and
  so that will be a primary tenet of the protocol.

** Connection establishment
   If connecting with a known identity, user's private key will be 
   Both parties will generate keys with which they will perform a
   handshake and subsequently derive a session key. The session key
   will subsequently be used in all communications.
   
** Handshake
   

** Subsequent messages
   These messages will be spack objects, which means that we already
   know whether a message lost data.

   So there'll be a spack object in the clear containing a byte array
   that is encrypted with some block cipher. Initially, I'll be using
   AES-256.
   
   I don't think I need any extra information, because the other
   guarantees I care about are all provided by TCP.

* Possible interesting facts in the future
  I think it would be pretty easy to implement message multiplexing
  with an extra hash.
